AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Description: Boilerplate CloudFormation template for a serverless REST API that uses API Gateway and AWS Lambda with a custom domain name
Parameters:
  DomainName:
    Type: String
    Description: The DNS name of the website, such as example.com
  HostedZoneId:
    Type: String
    Description: The ID of the Hosted Zone of the domain name
  AcmCertificateArn:
    Type: String
    Description: The Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM)
      for your domain name certificate
Resources:
  Api:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref 'AWS::StackName'
      Domain:
        DomainName: !Ref 'DomainName'
        CertificateArn: !Ref 'AcmCertificateArn'
        Route53:
          HostedZoneId: !Ref 'HostedZoneId'
      Tags:
        Confidentiality: Public
  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      InlineCode: |
          def handler(event, context):
              import json
              return {
                  "statusCode": 200,
                  "body": json.dumps(event),
              }
      Handler: index.handler
      Runtime: python3.7
      Role: !GetAtt 'ApiFunctionRole.Arn'
      Events:
        Api:
          Type: Api
          Properties:
            RestApiId: !Ref 'Api'
            Method: GET
            Path: /example
  ApiFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Ref 'ApiFunctionPolicy'
  ApiFunctionPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Path: /
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Sid: 0
            Effect: Allow
            Action:
              - logs:GetLogEvents
              - logs:PutLogEvents
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
            Resource:
              - !GetAtt 'ApiFunctionLogGroup.Arn'
              - !Sub '${ApiFunctionLogGroup.Arn}:log-stream:*'
  ApiFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7
Outputs:
  ApiId:
    Description: API ID
    Value: !Ref 'Api'
  ApiLogGroupArn:
    Description: The ARN of the API log group
    Value: !GetAtt 'ApiLogGroup.Arn'
  ApiFunctionExampleArn:
    Description: The ARN of the example lambda function for the HTTP API
    Value: !GetAtt 'ApiFunction.Arn'
  ApiDomain:
    Description: The domain of the API
    Value: !Ref 'DomainName'
    